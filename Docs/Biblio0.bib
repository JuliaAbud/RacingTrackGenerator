@article{Liu2021,
abstract = {Procedural content generation in video games has a long history. Existing procedural content generation methods, such as search-based, solver-based, rule-based and grammar-based methods have been applied to various content types such as levels, maps, character models, and textures. A research field centered on content generation in games has existed for more than a decade. More recently, deep learning has powered a remarkable range of inventions in content production, which are applicable to games. While some cutting-edge deep learning methods are applied on their own, others are applied in combination with more traditional methods, or in an interactive setting. This article surveys the various deep learning methods that have been applied to generate game content directly or indirectly, discusses deep learning methods that could be used for content generation purposes but are rarely used today, and envisages some limitations and potential future directions of deep learning for procedural content generation.},
archivePrefix = {arXiv},
arxivId = {2010.04548},
author = {Liu, Jialin and Snodgrass, Sam and Khalifa, Ahmed and Risi, Sebastian and Yannakakis, Georgios N. and Togelius, Julian},
doi = {10.1007/s00521-020-05383-8},
eprint = {2010.04548},
file = {:D\:/Cinvestav/Thesis/Papers/00_Deep Learning for Procedural Content Generation.pdf:pdf},
issn = {14333058},
journal = {Neural Computing and Applications},
keywords = {Computational and artificial intelligence,Deep learning,Game design,Machine learning,Procedural content generation},
number = {1},
pages = {19--37},
title = {{Deep learning for procedural content generation}},
volume = {33},
year = {2021}
}
@article{Giacomello2018,
abstract = {We applied Generative Adversarial Networks (GANs) to learn a model of DOOM levels from human-designed content. Initially, we analyzed the levels and extracted several topological features. Then, for each level, we extracted a set of images identifying the occupied area, the height map, the walls, and the position of game objects. We trained two GANs: One using plain level images, one using both the images and some of the features extracted during the preliminary analysis. We used the two networks to generate new levels and compared the results to assess whether the network trained using also the topological features could generate levels more similar to human-designed ones. Our results show that GANs can capture intrinsic structure of DOOM levels and appears to be a promising approach to level generation in first person shooter games.},
archivePrefix = {arXiv},
arxivId = {1804.09154},
author = {Giacomello, Edoardo and Lanzi, Pier Luca and Loiacono, Daniele},
doi = {10.1109/GEM.2018.8516539},
eprint = {1804.09154},
file = {:D\:/Cinvestav/Thesis/Papers/pt4/1804.09154Doom.pdf:pdf},
isbn = {9781538663042},
journal = {2018 IEEE Games, Entertainment, Media Conference, GEM 2018},
pages = {316--323},
title = {{DOOM Level Generation Using Generative Adversarial Networks}},
year = {2018}
}
@article{Khalifa2020,
abstract = {We investigate how reinforcement learning can be used to train level-designing agents. This represents a new approach to procedural content generation in games, where level design is framed as a game, and the content generator itself is learned. By seeing the design problem as a sequential task, we can use reinforcement learning to learn how to take the next action so that the expected final level quality is maximized. This approach can be used when few or no examples exist to train from, and the trained generator is very fast. We investigate three different ways of transforming two-dimensional level design problems into Markov decision processes, and apply these to three game environments.},
archivePrefix = {arXiv},
arxivId = {2001.09212},
author = {Khalifa, Ahmed and Bontrager, Philip and Earle, Sam and Togelius, Julian},
eprint = {2001.09212},
file = {:D\:/Cinvestav/Thesis/Papers/pt4_5/2001.09212.pdf:pdf},
isbn = {9781577358497},
journal = {Proceedings of the 16th AAAI Conference on Artificial Intelligence and Interactive Digital Entertainment, AIIDE 2020},
pages = {95--101},
title = {{PCGRL: Procedural content generation via reinforcement learning}},
year = {2020}
}
@article{Goodfellow2020,
abstract = {Generative adversarial networks are a kind of artificial intelligence algorithm designed to solve the generative modeling problem. The goal of a generative model is to study a collection of training examples and learn the probability distribution that generated them. Generative Adversarial Networks (GANs) are then able to generate more examples from the estimated probability distribution. Generative models based on deep learning are common, but GANs are among the most successful generative models (especially in terms of their ability to generate realistic high-resolution images). GANs have been successfully applied to a wide variety of tasks (mostly in research settings) but continue to present unique challenges and research opportunities because they are based on game theory while most other approaches to generative modeling are based on optimization.},
archivePrefix = {arXiv},
arxivId = {1406.2661},
author = {Goodfellow, Ian and Pouget-Abadie, Jean and Mirza, Mehdi and Xu, Bing and Warde-Farley, David and Ozair, Sherjil and Courville, Aaron and Bengio, Yoshua},
doi = {10.1145/3422622},
eprint = {1406.2661},
file = {:D\:/Cinvestav/Thesis/Papers/pt5/1406.2661.pdf:pdf},
issn = {15577317},
journal = {Communications of the ACM},
number = {11},
pages = {139--144},
title = {{Generative adversarial networks}},
volume = {63},
year = {2020}
}
@article{Juliani2018,
abstract = {Recent advances in artificial intelligence have been driven by the presence of increasingly realistic and complex simulated environments. However, many of the existing environments provide either unrealistic visuals, inaccurate physics, low task complexity, restricted agent perspective, or a limited capacity for interaction among artificial agents. Furthermore, many platforms lack the ability to flexibly configure the simulation, making the simulated environment a black-box from the perspective of the learning system. In this work, we propose a novel taxonomy of existing simulation platforms and discuss the highest level class of general platforms which enable the development of learning environments that are rich in visual, physical, task, and social complexity. We argue that modern game engines are uniquely suited to act as general platforms and as a case study examine the Unity engine and open source Unity ML-Agents Toolkit. We then survey the research enabled by Unity and the Unity ML-Agents Toolkit, discussing the kinds of research a flexible, interactive and easily configurable general platform can facilitate.},
archivePrefix = {arXiv},
arxivId = {1809.02627},
author = {Juliani, Arthur and Berges, Vincent-Pierre and Teng, Ervin and Cohen, Andrew and Harper, Jonathan and Elion, Chris and Goy, Chris and Gao, Yuan and Henry, Hunter and Mattar, Marwan and Lange, Danny},
eprint = {1809.02627},
file = {:C\:/Users/julia/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Juliani et al. - 2018 - Unity A General Platform for Intelligent Agents.pdf:pdf},
pages = {1--28},
title = {{Unity: A General Platform for Intelligent Agents}},
url = {http://arxiv.org/abs/1809.02627},
year = {2018}
}
@book{Giblin2001,
abstract = {This well-accepted introduction to computational geometry is a textbook for high-level undergraduate and low-level graduate courses. The focus is on algorithms and hence the book is well suited for students in computer science and engineering. Motivation is provided from the application areas: all solutions and techniques from computational geometry are related to particular applications in robotics, graphics, CAD/CAM, and geographic information systems. For students this motivation will be especially welcome. Modern insights in computational geometry are used to provide solutions that are both efficient and easy to understand and implement. All the basic techniques and topics from computational geometry, as well as several more advanced topics, are covered. The book is largely self-contained and can be used for self-study by anyone with a basic background in algorithms. In this third edition, besides revisions to the second edition, new sections discussing Voronoi diagrams of line segments, farthest-point Voronoi diagrams, and realistic input models have been added.},
author = {Giblin, Peter and de Berg, M. and van Kreveld, M. and Overmars, M. and Schwarzkopf, O.},
booktitle = {The Mathematical Gazette},
doi = {10.2307/3620533},
file = {:D\:/Cinvestav/Thesis/Books/Computational_Geometry_Algorithms_and_Applications.pdf:pdf},
isbn = {9783540779735},
issn = {00255572},
mendeley-groups = {Books},
number = {502},
pages = {175},
title = {{Computational Geometry: Algorithms and Applications}},
volume = {85},
year = {2001}
}
@article{Hayes2019,
abstract = {Generative models estimate the underlying distribution of a dataset to generate realistic samples according to that distribution. In this paper, we present the first membership inference attacks against generative models: given a data point, the adversary determines whether or not it was used to train the model. Our attacks leverage Generative Adversarial Networks (GANs), which combine a discriminative and a generative model, to detect overfitting and recognize inputs that were part of training datasets, using the discriminator's capacity to learn statistical differences in distributions. We present attacks based on both white-box and black-box access to the target model, against several state-of-the-art generative models, over datasets of complex representations of faces (LFW), objects (CIFAR-10), and medical images (Diabetic Retinopathy). We also discuss the sensitivity of the attacks to different training parameters, and their robustness against mitigation strategies, finding that defenses are either ineffective or lead to significantly worse performances of the generative models in terms of training stability and/or sample quality.},
archivePrefix = {arXiv},
arxivId = {1705.07663},
author = {Hayes, Jamie and Melis, Luca and Danezis, George and {De Cristofaro}, Emiliano},
doi = {10.2478/popets-2019-0008},
eprint = {1705.07663},
file = {:D\:/Cinvestav/Thesis/Papers/LOGAN_Evaluating_Privacy_Leakage_of_Generative_Mod.pdf:pdf},
issn = {2299-0984},
journal = {Proceedings on Privacy Enhancing Technologies},
number = {1},
pages = {133--152},
title = {{LOGAN: Membership Inference Attacks Against Generative Models}},
volume = {2019},
year = {2019}
}
@MISC{ Minecraft,
   author = {Persson, Markus and Bergensten, Jens },
   organization  = "Mojang Synergies AB.",
   title = "Minecraft",
   howpublished = "[Game]",
   year = 2011,
   url = "https://minecraft.net/en-us/"
}
@MISC{ NoMan'sSky,
   author = {Gareth, Bourn },
   organization  = "Hello Games",
   title = "No Man's Sky",
   howpublished = "[Game]",
   year = 2016,
   url = "https://www.nomanssky.com/"
}
@MISC{ TheBindingOfIsaac,
   author = {Edmund, McMillen and Florian, Himsl},
   organization  = "",
   title = "The Binding of Isaac",
   howpublished = "[Game]",
   year = 2011,
   url = "https://store.steampowered.com/app/113200/The_Binding_of_Isaac/"
}
@MISC{ Spelunky,
   author = {Derek, Yu },
   organization  = "Mossmouth",
   title = "Spelunky",
   howpublished = "[Game]",
   year = 2008,
   url = "https://spelunkyworld.com/"
}
@MISC{ BorderlandsSeries,
   author = {Mark, Darin and Jeramy, Cooke},
   organization  = "2K Games",
   title = "Borderlands series",
   howpublished = "[Game]",
   year = 2009,
   url = "https://borderlands.com/"
}