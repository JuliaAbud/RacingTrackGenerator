#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\begin_preamble
% for subfigures/subtables
\usepackage[caption=false,font=footnotesize]{subfig}
\usepackage{algorithm,algpseudocode}
\usepackage{helvet}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{forest}
\renewcommand{\familydefault}{\sfdefault}
\renewcommand{\baselinestretch}{1.5} 
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=blue,
    bookmarks=true,
}


\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2,
    otherkeywords={mkdir,cmake,make,git,sudo,bladeRF-cli,ad9361}
}

\lstset{style=mystyle}
\definecolor{folderbg}{RGB}{124,166,198}
\definecolor{folderborder}{RGB}{110,144,169}

\def\Size{4pt}
\tikzset{
  folder/.pic={
    \filldraw[draw=folderborder,top color=folderbg!50,bottom color=folderbg]
      (-1.05*\Size,0.2\Size+5pt) rectangle ++(.75*\Size,-0.2\Size-5pt);  
    \filldraw[draw=folderborder,top color=folderbg!50,bottom color=folderbg]
      (-1.15*\Size,-\Size) rectangle (1.15*\Size,\Size);
  }
}
\end_preamble
\options journal, onecolumn
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Your Title"
\pdf_author "Your Name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Racing Track Levels as Procedural Content Generation using Unity3D Engine
\end_layout

\begin_layout Author
Julia Alejandra Rodriguez-Abud 
\begin_inset Foot
status open

\begin_layout Plain Layout
Julia Alejandra Rodriguez-Abud is with the Department of Computater Science,
 Cinvestav, Guadalajara, MÃ©xico, e-mail: 
\begin_inset CommandInset href
LatexCommand href
target "julia.rodriguez@cinvestav.mx"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Special Paper Notice
Introduction to Machine Learning
\end_layout

\begin_layout Abstract
To be written 
\end_layout

\begin_layout Keywords
Machine Learning, Unity3D, Procedural Content Generation, Game Design
\end_layout

\begin_layout Keywords
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Keywords
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Standard
https://github.com/Unity-Technologies/ml-agents/blob/release_18_docs/docs/Install
ation.md 
\end_layout

\begin_layout Itemize
Unity Version 2020.3.6f1
\end_layout

\begin_layout Itemize
Unity Packages used: 
\end_layout

\begin_deeper
\begin_layout Itemize
ML Agents 2.1.0-exp.1 (Preview package)
\end_layout

\begin_layout Itemize
PathCreator
\end_layout

\end_deeper
\begin_layout Itemize
Pytorch 1.7.1
\end_layout

\begin_layout Itemize
Virtual environment at: venv
\backslash
Scripts
\backslash
activate
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Unity's Training environment
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Result_auto03_a.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
About ML-Agents
\end_layout

\begin_layout Standard
The Unity Machine Learning Agents Toolkit (ML-Agents) 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unity's-Learning-environment"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is an open-source project that enables games and simulations to serve as
 environments for training intelligent agents.
 The Unity package ML-Agents allows the use of Machine Learning techniques
 such as Reinforncement Learning or Imitation Learning.
 For reinforncement learning it is used PPO (Proximal Policy Optimization),
 and for the immitation learning is BC (Behavioral Cloning).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Unity's-Learning-environment"

\end_inset

Unity's Learning environment description
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MLAgents_.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
First Exercise with ML-Agents
\end_layout

\begin_layout Standard
Very simple exercise done to get familiar with the process of designing
 and training an environment in Unity3D.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:First-exercise"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Itemize
Set-up: A movement task where the agent must move to the reward.
 The reward and the agent have random positions at the start of each episode.
\end_layout

\begin_layout Itemize
Goal: Move towards the reward (white ball) and don't fall from the platform.
\end_layout

\begin_layout Itemize
Agents: The environment contains one agent.
 
\end_layout

\begin_layout Itemize
Agent Reward Function:+1.0 for colliding with the white ball.
 -1.0 for colliding with the border of the platform.
 
\end_layout

\begin_layout Itemize
Behavior Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Vector Observation space: Two Vector3 variables corresponding to agent position
 and target position.
 
\end_layout

\begin_layout Itemize
Actions: 2 discrete actions (Move left/right ; Move up/down)
\end_layout

\begin_layout Itemize
Visual Observations: None Float 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:First-exercise"

\end_inset

First exercise
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MLAgents_ejercicio0.png
	lyxscale 70
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Problem
\end_layout

\begin_layout Standard
The plan is to develop procedural content with Unity's ML-Agents trying
 methods that allow this without the use of many priors.
 
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

For a game in development
\series bold
 there may not be content to learn from
\series default
, because the content may not be made yet.
 In fact, not having to produce all of that content may be a prime reason
 for wanting to train a content generator in the first place.
 What would be desirable here would be a way of training a generator based
 on only a few pieces of hand-designed content, such as items, levels, or
 characters.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Find a way to generate content with the help of Machine Learning on the
 go while in development and allow our agent to learn to create the content
 by itself evetually or with minumum help.
\end_layout

\begin_layout Section
Suggested ideas
\end_layout

\begin_layout Standard
The idea to test this problem will be to create some racing track levels
 that consider the constraints they would require to be used in a game.
 
\end_layout

\begin_layout Standard
In this section we will describe possible general ways suggested to solve
 the creation of the racetrack.
 This being important because it would be the base to decide the data that
 would be collected and fed to out ML Agent in the next steps.
\end_layout

\begin_layout Subsection*
Assembled pieces 
\end_layout

\begin_layout Standard
The assemble pieces pipeline suggests having several premade prefabs with
 everything needed from the mesh, the material with textures, the colliders,
 etc.
 This way we would have prefabs for all the possible directions, such as:
 forward, small turn, big turn, slope, etc.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Assembled-pieces"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
Having n as four times the number of total pieces.
 Being 4 because we need to have each one of the pieces rotates in 90Â°,180Â°
 and 270Â° degrees.
\end_layout

\begin_layout Standard
The original idea for this (not implemented) process is for each one of
 the pieces to have a code from 1 to n.
 Leaving 0 for a part of the scene without any piece.
 And with the help of some cellular automata generate and fill a matrix
 that would help us to do some assembly of the tracks.
\end_layout

\begin_layout Standard
The problem with this approach is that for it to be tried out easily, all
 the pieces would need to have a predetermined size to help assemble them
 with the help of a matrix.
 
\end_layout

\begin_layout Standard
*Not fully discarded process for the generator.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Assembled-pieces"

\end_inset

Assembled pieces
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MLAgents_Assembledpieces.png
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Mesh generated from a bezier curve
\end_layout

\begin_layout Standard
A better solution to allow more freedom for the track design and route would
 be to create a bezier curve with some points as the controls.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bezier-curve-tool"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 This way we can make sure that the track fully loops by connecting the
 last and the first control point.
 
\end_layout

\begin_layout Standard
This process is based on generating a random set of points as Vector3 and
 allow them to be connected.
 With this created, we can use a tool to extrapolate a mesh and use it to
 apply a material and a collider to allow it to be usable as a Racing Track.
\end_layout

\begin_layout Standard
This is the process that seems to give a nicer result, so it will be explored
 as a Generator.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Bezier-curve-tool"

\end_inset

Bezier curve tool
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MLAgents_BezierCurve.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
XYZ-space vs XZ-space
\end_layout

\begin_layout Standard
Creating the racing track in a xyz-space is more interesting but more complex
 than what we need.
 
\end_layout

\begin_layout Standard
XZ-space More simple, good enough for out objective.
 We can classify easier this information.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Mesh-Generator-based"

\end_inset

Mesh Generator based on Bezier Curves
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MLAgents_BezierCurveMesh.png
	lyxscale 40
	scale 40

\end_inset


\begin_inset Graphics
	filename space_xz.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Algorithms 
\end_layout

\begin_layout Standard
Exploring the Procedural Content generation (PCG) of levels using ML-Agents
 in Unity limits ourselves to the use of reinfoncement and/or imitation
 learning to solve this problem.
\end_layout

\begin_layout Standard
Additionally to this and from the options suggested in Liu, J., et.
 al.
 the 
\begin_inset Quotes eld
\end_inset

concept
\begin_inset Quotes erd
\end_inset

 of Generative Adversarial Networks can help.
 Developing a Generator and a Discriminator to keep improving this tracks.
 This way we can keep generating tracks and testing their usability.
\end_layout

\begin_layout Subsection
Reinforcement Learning
\end_layout

\begin_layout Standard
The idea to start was to use Generative Adversarial Networks to solve this
 problem.
 But because of the limitations of the tool we will adapt the general idea.
 
\end_layout

\begin_layout Itemize
Generator with Reinforcement Learning PPO (Proximal Policy Optimization)
 
\end_layout

\begin_layout Itemize
Discriminator (Algorithm designed for this problem, not a NN)
\end_layout

\begin_layout Standard
ML-Agents uses a reinforcement learning technique called Proximal Policy
 Optimization (PPO).
 PPO uses a neural network to approximate the ideal function that maps an
 agent's observations to the best action an agent can take in a given state.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Neural network proposed for the Generator
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename RL_00.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Adding of a bezier control point, causes to give a small reward (This motivates
 it to have more points and shapes) 
\end_layout

\begin_layout Itemize
When finishing choose if this track works.
 (Full 1.0 and -1.0) 
\end_layout

\begin_deeper
\begin_layout Itemize
Opc1: Manually choose 
\end_layout

\begin_layout Itemize
Opc2: Discriminator Algorithm (not ML as we cannot have a classification
 ML with this tool) 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Reinforcement Learning
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename RL_01.png

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Generator
\end_layout

\begin_layout Standard
As we can see, the first thing was to decide was the process to be used
 to generate our Racetrack, in this approach it was decided to go with the
 generation of random points that generate a bezier curve to then extrapolate
 a mesh to be used.
 
\end_layout

\begin_layout Standard
The data that would be used to train our generator will be a list of Vector
 3 points.
 This points will be defined based on the last point generated based on
 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

.
 The 
\begin_inset Formula $y$
\end_inset

 pos will be defined to only have to possible values to allow us to have
 a gorund level and an upper level.
\end_layout

\begin_layout Standard
\begin_inset Formula $prevPos$
\end_inset

 keeps track of the last Vector3
\end_layout

\begin_layout Standard
\begin_inset Formula $max$
\end_inset

 max distance from the last point
\end_layout

\begin_layout Standard
\begin_inset Formula $newPos=prevPos+(random(-max,max),randomInt(0,1),random(-max,max))$
\end_inset


\end_layout

\begin_layout Itemize
Set-up: At the start of each episode we start with a point in Vector3 zero,
 and start gradually adding up new controls in random positions relative
 to the last point generated.
 
\end_layout

\begin_layout Itemize
Goal: Generate a racing track that is playable 
\end_layout

\begin_layout Itemize
Agents: The environment contains one agent.
 
\end_layout

\begin_layout Itemize
Agent Reward Function: 
\end_layout

\begin_deeper
\begin_layout Itemize
+0.1 when generating a new control point (more than 2 and less than 10)
\end_layout

\begin_layout Itemize
+1.0 accepted final track 
\end_layout

\begin_layout Itemize
-1.0 rejected final track 
\end_layout

\end_deeper
\begin_layout Itemize
Behavior Parameters: 
\end_layout

\begin_deeper
\begin_layout Itemize
Vector Observation space: Vector3 variable corresponding to prevPos control
 position, Integers corresponding to randomLength and currentLength 
\end_layout

\begin_layout Itemize
Actions: random generation of a normalized numbers (3) that will be used
 for the positions 
\end_layout

\begin_layout Itemize
Visual Observations: None 
\end_layout

\end_deeper
\begin_layout Subsection
Manual 
\begin_inset Quotes eld
\end_inset

Discriminator
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Classify as a valid racing track
\end_layout

\begin_layout Standard
InputKey.Q Accepts the track
\end_layout

\begin_layout Standard
InputKey.W Rejects the track
\end_layout

\begin_layout Standard
Just a few trials to check if the NN is actually improving.
 (Approx.
 40 minutes of manual discrimination) *Approx 1500 estimated episodes This
 test doesnât have the small reward when the path has more control points
 yet.
 
\end_layout

\begin_layout Subsection
Automatic 
\begin_inset Quotes eld
\end_inset

Discriminator
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Aerial view with B/W camera 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename AerialView.png

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Manual classification
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Result_manual00.png

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Automatic classificacion
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Result_auto00.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Result_auto01.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Result_auto02.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Hyperparameters
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Result_auto03.png
	lyxscale 80
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Bibliography
\end_layout

\begin_layout Standard
Juliani, A., Berges, V.-P., Teng, E., Cohen, A., Harper, J., Elion, C., Goy, C.,
 Gao, Y., Henry, H., Mattar, M., & Lange, D.
 (2018).
 Unity: A General Platform for Intelligent Agents.
 1â28.
 http://arxiv.org/abs/1809.02627
\end_layout

\begin_layout Standard
Liu, J., Snodgrass, S., Khalifa, A., Risi, S., Yannakakis, G.
 N., & Togelius, J.
 (2021).
 Deep learning for procedural content generation.
 Neural Computing and Applications, 33(1), 19â37.
 https://doi.org/10.1007/s00521-020-05383-8
\end_layout

\begin_layout Section*
Author
\end_layout

\begin_layout Biography without photo
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Julia Alejandra Rodriguez-Abud
\end_layout

\end_inset

 has a Digital Arts major.
 She has worked as a software developer and currently is pursuing her M.Sc.
 at Cinvestav Guadalajara.
 
\end_layout

\end_body
\end_document
